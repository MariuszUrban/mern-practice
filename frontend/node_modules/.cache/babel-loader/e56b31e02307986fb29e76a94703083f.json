{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mariuszurban/Desktop/MOJE PROJEKTY/3. MERN practice/frontend/src/shared/components/FormElements/Input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect } from \"react\";\nimport \"../FormElements/Input.css\";\nimport { validate } from \"../util/validators\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case \"TOUCH\":\n      return { ...state,\n        isTouched: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default function Input(props) {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: \"\",\n    isValid: false,\n    isTouched: false\n  });\n  useEffect(() => {\n    props.onInput(props.id, inputState.value, inputState);\n  }, []);\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const element = props.element === \"input\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && \"form-control--invalid\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 55\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Input, \"040u3CG8qy1hFSREyiE/x1mTw04=\");\n\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/mariuszurban/Desktop/MOJE PROJEKTY/3. MERN practice/frontend/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","onInput","id","changeHandler","event","target","touchHandler","element","placeholder","rows","label","errorText"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAO,2BAAP;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,KAAK,EAAEF,MAAM,CAACG,GAFT;AAGLC,QAAAA,OAAO,EAAEP,QAAQ,CAACG,MAAM,CAACG,GAAR,EAAaH,MAAM,CAACK,UAApB;AAHZ,OAAP;;AAKF,SAAK,OAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELO,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF;AACE,aAAOP,KAAP;AAbJ;AAeD,CAhBD;;AAkBA,eAAe,SAASQ,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACnC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBf,UAAU,CAACG,YAAD,EAAe;AACtDI,IAAAA,KAAK,EAAE,EAD+C;AAEtDE,IAAAA,OAAO,EAAE,KAF6C;AAGtDE,IAAAA,SAAS,EAAE;AAH2C,GAAf,CAAzC;AAMAV,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,KAAK,CAACG,OAAN,CAAcH,KAAK,CAACI,EAApB,EAAwBH,UAAU,CAACP,KAAnC,EAA0CO,UAA1C;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMI,aAAa,GAAIC,KAAD,IAAW;AAC/BJ,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,QADC;AAEPE,MAAAA,GAAG,EAAEW,KAAK,CAACC,MAAN,CAAab,KAFX;AAGPG,MAAAA,UAAU,EAAEG,KAAK,CAACH;AAHX,KAAD,CAAR;AAKD,GAND;;AAQA,QAAMW,YAAY,GAAG,MAAM;AACzBN,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GAJD;;AAMA,QAAMgB,OAAO,GACXT,KAAK,CAACS,OAAN,KAAkB,OAAlB,gBACE;AACE,IAAA,EAAE,EAAET,KAAK,CAACI,EADZ;AAEE,IAAA,IAAI,EAAEJ,KAAK,CAACP,IAFd;AAGE,IAAA,WAAW,EAAEO,KAAK,CAACU,WAHrB;AAIE,IAAA,QAAQ,EAAEL,aAJZ;AAKE,IAAA,MAAM,EAAEG,YALV;AAME,IAAA,KAAK,EAAEP,UAAU,CAACP;AANpB;AAAA;AAAA;AAAA;AAAA,UADF,gBAUE;AACE,IAAA,EAAE,EAAEM,KAAK,CAACI,EADZ;AAEE,IAAA,IAAI,EAAEJ,KAAK,CAACW,IAAN,IAAc,CAFtB;AAGE,IAAA,QAAQ,EAAEN,aAHZ;AAIE,IAAA,MAAM,EAAEG,YAJV;AAKE,IAAA,KAAK,EAAEP,UAAU,CAACP;AALpB;AAAA;AAAA;AAAA;AAAA,UAXJ;AAoBA,sBACE;AACE,IAAA,SAAS,EAAG,gBACV,CAACO,UAAU,CAACL,OAAZ,IAAuBK,UAAU,CAACH,SAAlC,IAA+C,uBAChD,EAHH;AAAA,4BAKE;AAAO,MAAA,OAAO,EAAEE,KAAK,CAACI,EAAtB;AAAA,gBAA2BJ,KAAK,CAACY;AAAjC;AAAA;AAAA;AAAA;AAAA,YALF,EAMGH,OANH,EAOG,CAACR,UAAU,CAACL,OAAZ,IAAuBK,UAAU,CAACH,SAAlC,iBAA+C;AAAA,gBAAIE,KAAK,CAACa;AAAV;AAAA;AAAA;AAAA;AAAA,YAPlD;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAxDuBd,K;;KAAAA,K","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\nimport \"../FormElements/Input.css\";\nimport { validate } from \"../util/validators\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\":\n      return {\n        ...state,\n        isTouched: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default function Input(props) {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: \"\",\n    isValid: false,\n    isTouched: false,\n  });\n\n  useEffect(() => {\n    props.onInput(props.id, inputState.value, inputState)\n  }, [])\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\",\n    });\n  };\n\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}